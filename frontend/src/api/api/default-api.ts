/* tslint:disable */
/* eslint-disable */
/**
 * Image Processor API
 * OpenAPI specification for Image Processor backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DirEntry } from '../model';
// @ts-ignore
import type { ExtrasBatchParams } from '../model';
// @ts-ignore
import type { ExtrasParams } from '../model';
// @ts-ignore
import type { GetDefaultPath200Response } from '../model';
// @ts-ignore
import type { GetDialogs200Response } from '../model';
// @ts-ignore
import type { GetImageDialog200Response } from '../model';
// @ts-ignore
import type { HistoryEntry } from '../model';
// @ts-ignore
import type { ImageDescription } from '../model';
// @ts-ignore
import type { ImageMeta } from '../model';
// @ts-ignore
import type { ImageResponse } from '../model';
// @ts-ignore
import type { Img2ImgRequest } from '../model';
// @ts-ignore
import type { LoraInfo } from '../model';
// @ts-ignore
import type { ModelInfo } from '../model';
// @ts-ignore
import type { PingResponse } from '../model';
// @ts-ignore
import type { ProgressResponse } from '../model';
// @ts-ignore
import type { ReinitResponse } from '../model';
// @ts-ignore
import type { ReorderImageRequest } from '../model';
// @ts-ignore
import type { SpeakerMeta } from '../model';
// @ts-ignore
import type { SwitchModelRequest } from '../model';
// @ts-ignore
import type { Txt2ImgRequest } from '../model';
// @ts-ignore
import type { UploadResponse } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImage: async (id: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteImage', 'id', id)
            const localVarPath = `/api/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExtrasParams} extrasParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extras: async (extrasParams: ExtrasParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'extrasParams' is not null or undefined
            assertParamExists('extras', 'extrasParams', extrasParams)
            const localVarPath = `/api/v1/extras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(extrasParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExtrasBatchParams} extrasBatchParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasBatch: async (extrasBatchParams: ExtrasBatchParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'extrasBatchParams' is not null or undefined
            assertParamExists('extrasBatch', 'extrasBatchParams', extrasBatchParams)
            const localVarPath = `/api/v1/extras/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(extrasBatchParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultPath: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/path`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDialogs: async (path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dialogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirs: async (path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dirs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (imageID: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageID' is not null or undefined
            assertParamExists('getHistory', 'imageID', imageID)
            const localVarPath = `/api/v1/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (imageID !== undefined) {
                localVarQueryParameter['imageID'] = imageID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDescription: async (id: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImageDescription', 'id', id)
            const localVarPath = `/api/images/{id}/description`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDialog: async (id: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImageDialog', 'id', id)
            const localVarPath = `/api/images/{id}/dialog`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages: async (path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoras: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/loras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModels: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [skipCurrentImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgress: async (skipCurrentImage?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skipCurrentImage !== undefined) {
                localVarQueryParameter['skip_current_image'] = skipCurrentImage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpeakers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/speakers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpdates: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/updates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Img2ImgRequest} img2ImgRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        img2Img: async (img2ImgRequest: Img2ImgRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'img2ImgRequest' is not null or undefined
            assertParamExists('img2Img', 'img2ImgRequest', img2ImgRequest)
            const localVarPath = `/api/v1/img2img`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(img2ImgRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reinitDirs: async (path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dirs/reinit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ReorderImageRequest} reorderImageRequest 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderImage: async (id: string, reorderImageRequest: ReorderImageRequest, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reorderImage', 'id', id)
            // verify required parameter 'reorderImageRequest' is not null or undefined
            assertParamExists('reorderImage', 'reorderImageRequest', reorderImageRequest)
            const localVarPath = `/api/images/{id}/reorder`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reorderImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {GetImageDialog200Response} getImageDialog200Response 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImageDialog: async (id: string, getImageDialog200Response: GetImageDialog200Response, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setImageDialog', 'id', id)
            // verify required parameter 'getImageDialog200Response' is not null or undefined
            assertParamExists('setImageDialog', 'getImageDialog200Response', getImageDialog200Response)
            const localVarPath = `/api/images/{id}/dialog`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getImageDialog200Response, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpeakerMeta} speakerMeta 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSpeakers: async (speakerMeta: SpeakerMeta, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'speakerMeta' is not null or undefined
            assertParamExists('setSpeakers', 'speakerMeta', speakerMeta)
            const localVarPath = `/api/speakers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(speakerMeta, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SwitchModelRequest} switchModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchModel: async (switchModelRequest: SwitchModelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'switchModelRequest' is not null or undefined
            assertParamExists('switchModel', 'switchModelRequest', switchModelRequest)
            const localVarPath = `/api/v1/models/switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(switchModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Txt2ImgRequest} txt2ImgRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txt2Img: async (txt2ImgRequest: Txt2ImgRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txt2ImgRequest' is not null or undefined
            assertParamExists('txt2Img', 'txt2ImgRequest', txt2ImgRequest)
            const localVarPath = `/api/v1/txt2img`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(txt2ImgRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImages: async (files: Array<File>, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('uploadImages', 'files', files)
            const localVarPath = `/api/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImage(id: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ExtrasParams} extrasParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extras(extrasParams: ExtrasParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extras(extrasParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.extras']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ExtrasBatchParams} extrasBatchParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasBatch(extrasBatchParams: ExtrasBatchParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasBatch(extrasBatchParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.extrasBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultPath(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDefaultPath200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultPath(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDefaultPath']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDialogs(path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDialogs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDialogs(path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDialogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirs(path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DirEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDirs(path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDirs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} imageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(imageID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(imageID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageDescription(id: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDescription(id, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getImageDescription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageDialog(id: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetImageDialog200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDialog(id, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getImageDialog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImages(path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageMeta>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImages(path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoras(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LoraInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoras(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getLoras']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModels(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getModels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [skipCurrentImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProgress(skipCurrentImage?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProgress(skipCurrentImage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpeakers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpeakerMeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpeakers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSpeakers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUpdates(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUpdates(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUpdates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Img2ImgRequest} img2ImgRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async img2Img(img2ImgRequest: Img2ImgRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.img2Img(img2ImgRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.img2Img']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ping(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.ping']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.regions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reinitDirs(path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reinitDirs(path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.reinitDirs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ReorderImageRequest} reorderImageRequest 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderImage(id: string, reorderImageRequest: ReorderImageRequest, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderImage(id, reorderImageRequest, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.reorderImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {GetImageDialog200Response} getImageDialog200Response 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setImageDialog(id: string, getImageDialog200Response: GetImageDialog200Response, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setImageDialog(id, getImageDialog200Response, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setImageDialog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpeakerMeta} speakerMeta 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSpeakers(speakerMeta: SpeakerMeta, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpeakerMeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSpeakers(speakerMeta, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setSpeakers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SwitchModelRequest} switchModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async switchModel(switchModelRequest: SwitchModelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.switchModel(switchModelRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.switchModel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Txt2ImgRequest} txt2ImgRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async txt2Img(txt2ImgRequest: Txt2ImgRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.txt2Img(txt2ImgRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.txt2Img']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadImages(files: Array<File>, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImages(files, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {DefaultApiDeleteImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImage(requestParameters: DefaultApiDeleteImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteImage(requestParameters.id, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiExtrasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extras(requestParameters: DefaultApiExtrasRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageResponse>> {
            return localVarFp.extras(requestParameters.extrasParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiExtrasBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasBatch(requestParameters: DefaultApiExtrasBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageResponse>> {
            return localVarFp.extrasBatch(requestParameters.extrasBatchParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultPath(options?: RawAxiosRequestConfig): AxiosPromise<GetDefaultPath200Response> {
            return localVarFp.getDefaultPath(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetDialogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDialogs(requestParameters: DefaultApiGetDialogsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetDialogs200Response> {
            return localVarFp.getDialogs(requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetDirsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirs(requestParameters: DefaultApiGetDirsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<DirEntry>> {
            return localVarFp.getDirs(requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(requestParameters: DefaultApiGetHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<HistoryEntry>> {
            return localVarFp.getHistory(requestParameters.imageID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetImageDescriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDescription(requestParameters: DefaultApiGetImageDescriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageDescription> {
            return localVarFp.getImageDescription(requestParameters.id, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetImageDialogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDialog(requestParameters: DefaultApiGetImageDialogRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetImageDialog200Response> {
            return localVarFp.getImageDialog(requestParameters.id, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages(requestParameters: DefaultApiGetImagesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageMeta>> {
            return localVarFp.getImages(requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoras(options?: RawAxiosRequestConfig): AxiosPromise<Array<LoraInfo>> {
            return localVarFp.getLoras(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModels(options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelInfo>> {
            return localVarFp.getModels(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgress(requestParameters: DefaultApiGetProgressRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProgressResponse> {
            return localVarFp.getProgress(requestParameters.skipCurrentImage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpeakers(options?: RawAxiosRequestConfig): AxiosPromise<SpeakerMeta> {
            return localVarFp.getSpeakers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpdates(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getUpdates(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiImg2ImgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        img2Img(requestParameters: DefaultApiImg2ImgRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageResponse> {
            return localVarFp.img2Img(requestParameters.img2ImgRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: RawAxiosRequestConfig): AxiosPromise<PingResponse> {
            return localVarFp.ping(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.regions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReinitDirsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reinitDirs(requestParameters: DefaultApiReinitDirsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ReinitResponse> {
            return localVarFp.reinitDirs(requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReorderImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderImage(requestParameters: DefaultApiReorderImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reorderImage(requestParameters.id, requestParameters.reorderImageRequest, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSetImageDialogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImageDialog(requestParameters: DefaultApiSetImageDialogRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setImageDialog(requestParameters.id, requestParameters.getImageDialog200Response, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSetSpeakersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSpeakers(requestParameters: DefaultApiSetSpeakersRequest, options?: RawAxiosRequestConfig): AxiosPromise<SpeakerMeta> {
            return localVarFp.setSpeakers(requestParameters.speakerMeta, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSwitchModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchModel(requestParameters: DefaultApiSwitchModelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.switchModel(requestParameters.switchModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiTxt2ImgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txt2Img(requestParameters: DefaultApiTxt2ImgRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageResponse> {
            return localVarFp.txt2Img(requestParameters.txt2ImgRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUploadImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImages(requestParameters: DefaultApiUploadImagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadResponse> {
            return localVarFp.uploadImages(requestParameters.files, requestParameters.path, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteImage operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteImageRequest
 */
export interface DefaultApiDeleteImageRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiDeleteImage
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiDeleteImage
     */
    readonly path?: string
}

/**
 * Request parameters for extras operation in DefaultApi.
 * @export
 * @interface DefaultApiExtrasRequest
 */
export interface DefaultApiExtrasRequest {
    /**
     * 
     * @type {ExtrasParams}
     * @memberof DefaultApiExtras
     */
    readonly extrasParams: ExtrasParams
}

/**
 * Request parameters for extrasBatch operation in DefaultApi.
 * @export
 * @interface DefaultApiExtrasBatchRequest
 */
export interface DefaultApiExtrasBatchRequest {
    /**
     * 
     * @type {ExtrasBatchParams}
     * @memberof DefaultApiExtrasBatch
     */
    readonly extrasBatchParams: ExtrasBatchParams
}

/**
 * Request parameters for getDialogs operation in DefaultApi.
 * @export
 * @interface DefaultApiGetDialogsRequest
 */
export interface DefaultApiGetDialogsRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetDialogs
     */
    readonly path?: string
}

/**
 * Request parameters for getDirs operation in DefaultApi.
 * @export
 * @interface DefaultApiGetDirsRequest
 */
export interface DefaultApiGetDirsRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetDirs
     */
    readonly path?: string
}

/**
 * Request parameters for getHistory operation in DefaultApi.
 * @export
 * @interface DefaultApiGetHistoryRequest
 */
export interface DefaultApiGetHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetHistory
     */
    readonly imageID: string
}

/**
 * Request parameters for getImageDescription operation in DefaultApi.
 * @export
 * @interface DefaultApiGetImageDescriptionRequest
 */
export interface DefaultApiGetImageDescriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetImageDescription
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetImageDescription
     */
    readonly path?: string
}

/**
 * Request parameters for getImageDialog operation in DefaultApi.
 * @export
 * @interface DefaultApiGetImageDialogRequest
 */
export interface DefaultApiGetImageDialogRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetImageDialog
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetImageDialog
     */
    readonly path?: string
}

/**
 * Request parameters for getImages operation in DefaultApi.
 * @export
 * @interface DefaultApiGetImagesRequest
 */
export interface DefaultApiGetImagesRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetImages
     */
    readonly path?: string
}

/**
 * Request parameters for getProgress operation in DefaultApi.
 * @export
 * @interface DefaultApiGetProgressRequest
 */
export interface DefaultApiGetProgressRequest {
    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiGetProgress
     */
    readonly skipCurrentImage?: boolean
}

/**
 * Request parameters for img2Img operation in DefaultApi.
 * @export
 * @interface DefaultApiImg2ImgRequest
 */
export interface DefaultApiImg2ImgRequest {
    /**
     * 
     * @type {Img2ImgRequest}
     * @memberof DefaultApiImg2Img
     */
    readonly img2ImgRequest: Img2ImgRequest
}

/**
 * Request parameters for reinitDirs operation in DefaultApi.
 * @export
 * @interface DefaultApiReinitDirsRequest
 */
export interface DefaultApiReinitDirsRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiReinitDirs
     */
    readonly path?: string
}

/**
 * Request parameters for reorderImage operation in DefaultApi.
 * @export
 * @interface DefaultApiReorderImageRequest
 */
export interface DefaultApiReorderImageRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiReorderImage
     */
    readonly id: string

    /**
     * 
     * @type {ReorderImageRequest}
     * @memberof DefaultApiReorderImage
     */
    readonly reorderImageRequest: ReorderImageRequest

    /**
     * 
     * @type {string}
     * @memberof DefaultApiReorderImage
     */
    readonly path?: string
}

/**
 * Request parameters for setImageDialog operation in DefaultApi.
 * @export
 * @interface DefaultApiSetImageDialogRequest
 */
export interface DefaultApiSetImageDialogRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiSetImageDialog
     */
    readonly id: string

    /**
     * 
     * @type {GetImageDialog200Response}
     * @memberof DefaultApiSetImageDialog
     */
    readonly getImageDialog200Response: GetImageDialog200Response

    /**
     * 
     * @type {string}
     * @memberof DefaultApiSetImageDialog
     */
    readonly path?: string
}

/**
 * Request parameters for setSpeakers operation in DefaultApi.
 * @export
 * @interface DefaultApiSetSpeakersRequest
 */
export interface DefaultApiSetSpeakersRequest {
    /**
     * 
     * @type {SpeakerMeta}
     * @memberof DefaultApiSetSpeakers
     */
    readonly speakerMeta: SpeakerMeta
}

/**
 * Request parameters for switchModel operation in DefaultApi.
 * @export
 * @interface DefaultApiSwitchModelRequest
 */
export interface DefaultApiSwitchModelRequest {
    /**
     * 
     * @type {SwitchModelRequest}
     * @memberof DefaultApiSwitchModel
     */
    readonly switchModelRequest: SwitchModelRequest
}

/**
 * Request parameters for txt2Img operation in DefaultApi.
 * @export
 * @interface DefaultApiTxt2ImgRequest
 */
export interface DefaultApiTxt2ImgRequest {
    /**
     * 
     * @type {Txt2ImgRequest}
     * @memberof DefaultApiTxt2Img
     */
    readonly txt2ImgRequest: Txt2ImgRequest
}

/**
 * Request parameters for uploadImages operation in DefaultApi.
 * @export
 * @interface DefaultApiUploadImagesRequest
 */
export interface DefaultApiUploadImagesRequest {
    /**
     * 
     * @type {Array<File>}
     * @memberof DefaultApiUploadImages
     */
    readonly files: Array<File>

    /**
     * 
     * @type {string}
     * @memberof DefaultApiUploadImages
     */
    readonly path?: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {DefaultApiDeleteImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteImage(requestParameters: DefaultApiDeleteImageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteImage(requestParameters.id, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiExtrasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public extras(requestParameters: DefaultApiExtrasRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).extras(requestParameters.extrasParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiExtrasBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public extrasBatch(requestParameters: DefaultApiExtrasBatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).extrasBatch(requestParameters.extrasBatchParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDefaultPath(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDefaultPath(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetDialogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDialogs(requestParameters: DefaultApiGetDialogsRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDialogs(requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetDirsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDirs(requestParameters: DefaultApiGetDirsRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDirs(requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHistory(requestParameters: DefaultApiGetHistoryRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHistory(requestParameters.imageID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetImageDescriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getImageDescription(requestParameters: DefaultApiGetImageDescriptionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getImageDescription(requestParameters.id, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetImageDialogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getImageDialog(requestParameters: DefaultApiGetImageDialogRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getImageDialog(requestParameters.id, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getImages(requestParameters: DefaultApiGetImagesRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getImages(requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLoras(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLoras(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getModels(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getModels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProgress(requestParameters: DefaultApiGetProgressRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProgress(requestParameters.skipCurrentImage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSpeakers(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSpeakers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUpdates(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUpdates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiImg2ImgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public img2Img(requestParameters: DefaultApiImg2ImgRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).img2Img(requestParameters.img2ImgRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public ping(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ping(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public regions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).regions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReinitDirsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reinitDirs(requestParameters: DefaultApiReinitDirsRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).reinitDirs(requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReorderImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reorderImage(requestParameters: DefaultApiReorderImageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).reorderImage(requestParameters.id, requestParameters.reorderImageRequest, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSetImageDialogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setImageDialog(requestParameters: DefaultApiSetImageDialogRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setImageDialog(requestParameters.id, requestParameters.getImageDialog200Response, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSetSpeakersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setSpeakers(requestParameters: DefaultApiSetSpeakersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setSpeakers(requestParameters.speakerMeta, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSwitchModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public switchModel(requestParameters: DefaultApiSwitchModelRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).switchModel(requestParameters.switchModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiTxt2ImgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public txt2Img(requestParameters: DefaultApiTxt2ImgRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).txt2Img(requestParameters.txt2ImgRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUploadImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadImages(requestParameters: DefaultApiUploadImagesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadImages(requestParameters.files, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }
}

